/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    'front-end-integration': FrontEndIntegrationAuthOperations;
  };
  blocks: {};
  collections: {
    media: Media;
    users: User;
    categories: Category;
    blogs: Blog;
    tours: Tour;
    destinations: Destination;
    reviews: Review;
    bookings: Booking;
    'front-end-integration': FrontEndIntegration;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    tours: ToursSelect<false> | ToursSelect<true>;
    destinations: DestinationsSelect<false> | DestinationsSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    bookings: BookingsSelect<false> | BookingsSelect<true>;
    'front-end-integration': FrontEndIntegrationSelect<false> | FrontEndIntegrationSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (FrontEndIntegration & {
        collection: 'front-end-integration';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface FrontEndIntegrationAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  profileImage?: (number | null) | Media;
  isAuthor?: boolean | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  name: string;
  /**
   * Automatically generated from the name
   */
  slug: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: number;
  title: string;
  slug: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  excerpt: string;
  coverImage: number | Media;
  author: number | User;
  /**
   * Select one or more categories for this blog post
   */
  categories: (number | Category)[];
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  publishedDate: string;
  status: 'draft' | 'published' | 'archived';
  /**
   * Select which website(s) this content should appear on. Selecting "All" includes all sites.
   */
  sites: ('all' | 'holiday-deals' | 'luxury-travel')[];
  seo: {
    seoTitle: string;
    seoDescription: string;
    /**
     * Comma-separated keywords for search engines
     */
    seoKeywords: string;
    canonicalURL: string;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tours".
 */
export interface Tour {
  id: number;
  title: string;
  slug: string;
  description?: string | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Upload multiple images to display as a gallery
   */
  gallery?: (number | Media)[] | null;
  featured?: boolean | null;
  pricing: {
    basePrice: number;
    currency: string;
    priceIncludes?:
      | {
          item: string;
          id?: string | null;
        }[]
      | null;
    priceExcludes?:
      | {
          item: string;
          id?: string | null;
        }[]
      | null;
  };
  duration: {
    days: number;
    nights: number;
  };
  itinerary: {
    day: number;
    title: string;
    description: string;
    activities?:
      | {
          activity: string;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  destinations: (number | Destination)[];
  categories: (number | Category)[];
  availability?:
    | {
        startDate: string;
        endDate: string;
        minPeople: number;
        maxPeople: number;
        id?: string | null;
      }[]
    | null;
  /**
   * Select which website(s) this content should appear on. Selecting "All" includes all sites.
   */
  sites: ('all' | 'holiday-deals' | 'luxury-travel')[];
  seo: {
    seoTitle: string;
    seoDescription: string;
    /**
     * Comma-separated keywords for search engines
     */
    seoKeywords: string;
    canonicalURL: string;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinations".
 */
export interface Destination {
  id: number;
  title: string;
  slug: string;
  description?: string | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  country: string;
  region: string;
  coordinates: {
    lat: number;
    lng: number;
  };
  /**
   * Upload multiple images to display as a gallery
   */
  gallery?: (number | Media)[] | null;
  attractions?:
    | {
        attraction: string;
        id?: string | null;
      }[]
    | null;
  bestTimeToVisit?: string | null;
  featured?: boolean | null;
  /**
   * Select which website(s) this content should appear on. Selecting "All" includes all sites.
   */
  sites: ('all' | 'holiday-deals' | 'luxury-travel')[];
  seo: {
    seoTitle: string;
    seoDescription: string;
    /**
     * Comma-separated keywords for search engines
     */
    seoKeywords: string;
    canonicalURL: string;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: number;
  tour: number | Tour;
  reviewerName: string;
  reviewerEmail?: string | null;
  rating: number;
  reviewText: string;
  status: 'pending' | 'approved' | 'rejected';
  /**
   * Select which website(s) this content should appear on. Selecting "All" includes all sites.
   */
  sites: ('all' | 'holiday-deals' | 'luxury-travel')[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings".
 */
export interface Booking {
  id: number;
  tour: number | Tour;
  userEmail: string;
  userName: string;
  userPhone?: string | null;
  startDate: string;
  endDate: string;
  numberOfGuests: number;
  status: 'pending' | 'confirmed' | 'cancelled';
  notes?: string | null;
  /**
   * Select which website(s) this tour should appear on
   */
  sites: ('holiday-deals' | 'luxury-travel')[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "front-end-integration".
 */
export interface FrontEndIntegration {
  id: number;
  title: string;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'blogs';
        value: number | Blog;
      } | null)
    | ({
        relationTo: 'tours';
        value: number | Tour;
      } | null)
    | ({
        relationTo: 'destinations';
        value: number | Destination;
      } | null)
    | ({
        relationTo: 'reviews';
        value: number | Review;
      } | null)
    | ({
        relationTo: 'bookings';
        value: number | Booking;
      } | null)
    | ({
        relationTo: 'front-end-integration';
        value: number | FrontEndIntegration;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'front-end-integration';
        value: number | FrontEndIntegration;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'front-end-integration';
        value: number | FrontEndIntegration;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  profileImage?: T;
  isAuthor?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?: T;
  excerpt?: T;
  coverImage?: T;
  author?: T;
  categories?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  publishedDate?: T;
  status?: T;
  sites?: T;
  seo?:
    | T
    | {
        seoTitle?: T;
        seoDescription?: T;
        seoKeywords?: T;
        canonicalURL?: T;
        noIndex?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tours_select".
 */
export interface ToursSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  content?: T;
  gallery?: T;
  featured?: T;
  pricing?:
    | T
    | {
        basePrice?: T;
        currency?: T;
        priceIncludes?:
          | T
          | {
              item?: T;
              id?: T;
            };
        priceExcludes?:
          | T
          | {
              item?: T;
              id?: T;
            };
      };
  duration?:
    | T
    | {
        days?: T;
        nights?: T;
      };
  itinerary?:
    | T
    | {
        day?: T;
        title?: T;
        description?: T;
        activities?:
          | T
          | {
              activity?: T;
              id?: T;
            };
        id?: T;
      };
  destinations?: T;
  categories?: T;
  availability?:
    | T
    | {
        startDate?: T;
        endDate?: T;
        minPeople?: T;
        maxPeople?: T;
        id?: T;
      };
  sites?: T;
  seo?:
    | T
    | {
        seoTitle?: T;
        seoDescription?: T;
        seoKeywords?: T;
        canonicalURL?: T;
        noIndex?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinations_select".
 */
export interface DestinationsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  content?: T;
  country?: T;
  region?: T;
  coordinates?:
    | T
    | {
        lat?: T;
        lng?: T;
      };
  gallery?: T;
  attractions?:
    | T
    | {
        attraction?: T;
        id?: T;
      };
  bestTimeToVisit?: T;
  featured?: T;
  sites?: T;
  seo?:
    | T
    | {
        seoTitle?: T;
        seoDescription?: T;
        seoKeywords?: T;
        canonicalURL?: T;
        noIndex?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  tour?: T;
  reviewerName?: T;
  reviewerEmail?: T;
  rating?: T;
  reviewText?: T;
  status?: T;
  sites?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookings_select".
 */
export interface BookingsSelect<T extends boolean = true> {
  tour?: T;
  userEmail?: T;
  userName?: T;
  userPhone?: T;
  startDate?: T;
  endDate?: T;
  numberOfGuests?: T;
  status?: T;
  notes?: T;
  sites?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "front-end-integration_select".
 */
export interface FrontEndIntegrationSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}